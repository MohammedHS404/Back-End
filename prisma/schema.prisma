// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model
model User {
  UID                String   @id @default(uuid())
  firstName          String   @db.VarChar(50)
  LastName           String   @db.VarChar(50)
  phone              String   @unique @db.VarChar(20)
  password           String
  username           String   @unique @db.VarChar(20)
  email              String   @db.VarChar(50)
  nationalID         String   @unique @db.VarChar(15)
  nationalIdFileName String
  birthdate          DateTime

  balance        Float   @default(0)
  profilePicture String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define the sentTransactions field as a relation to the Transaction model
  sentTransactions Transaction[] @relation("sender_transactions")

  // Define the receivedTransactions field as a relation to the Transaction model
  receivedTransactions Transaction[] @relation("recipient_transactions")

  // Define the sentTransactionRequests field as a relation to the TransactionRequest model (requests done by this user)
  sentTransactionRequests TransactionRequest[] @relation("requester_transaction_requests")

  // Define the receivedTransactionRequests field as a relation to the TransactionRequest model (requests sent to this user)
  receivedTransactionRequests TransactionRequest[] @relation("recipient_transaction_requests")

  // Define the virtual credit card field
  VirtualCreditCard VirtualCreditCard?

  // Define the linked Subaccounts 
  subaccounts Subaccount[]
}

// Define the Transaction model (send/receive money between users)
model Transaction {
  id     Int   @id @default(autoincrement())
  amount Float

  status TransactionStatus

  paymentMethod   PaymentMethod   @default(CASH)
  transactionType TransactionType @default(TRANSFER)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Define the sender and recipient fields as references to the User model
  sender_id    String
  recipient_id String?
  sender       User    @relation("sender_transactions", fields: [sender_id], references: [UID])
  recipient    User?   @relation("recipient_transactions", fields: [recipient_id], references: [UID])

  // Define the sender and recipient fields as references to the subaccount model
  senderSubaccountUID    String?
  recipientSubaccountUID String?
  senderSubaccount       Subaccount? @relation("sender_transactions", fields: [senderSubaccountUID], references: [id])
  recipientSubaccount    Subaccount? @relation("recipient_transactions", fields: [recipientSubaccountUID], references: [id])

  // Add a new field to indicate whether the transaction is a parent or child transaction
  transactionLevel TransactionLevel @default(PARENT)
}

enum TransactionLevel {
  PARENT
  CHILD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  WALLET
  CASH
  CREDIT_CARD
  VCC
}

enum TransactionType {
  TRANSFER
  FUND_SUBACCOUNT
  ONLINE_PAYMENT
  ADDING_FUNDS
}

// Define the TransactionRequest model to be used in requesting money
model TransactionRequest {
  id           Int                      @id @default(autoincrement())
  requester_id String
  recipient_id String
  amount       Float
  status       TransactionRequestStatus

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Define the requester and recipient fields as references to the User model
  requester User @relation("requester_transaction_requests", fields: [requester_id], references: [UID])
  recipient User @relation("recipient_transaction_requests", fields: [recipient_id], references: [UID])
}

enum TransactionRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

// Define the Virtual Credit Card model 
model VirtualCreditCard {
  id               Int      @id @default(autoincrement())
  cardNumber       String   @unique @db.VarChar(19)
  amount           Float
  expirationDate   DateTime
  usedFlag         Boolean  @default(false) // the cvv is only allowed to be used once in a specific period
  creditCardType   CCTYPE
  ccHolderName     String
  verificationCode Int

  userId String @unique
  user   User   @relation(fields: [userId], references: [UID])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum CCTYPE {
  amex
  jcb
  mastercard
  visa
}

// define the sub account mode
model Subaccount {
  id        String @id @default(uuid())
  firstName String @db.VarChar(50)
  LastName  String @db.VarChar(50)
  phone     String @unique @db.VarChar(20)
  password  String
  username  String @unique @db.VarChar(20)
  email     String @db.VarChar(50)

  balance        Float   @default(0)
  profilePicture String?

  spendingLimit      Float
  spendingCategories String[]

  dailyLimit       Float?
  monthlyLimit     Float?
  transactionLimit Float?

  birthdate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerID], references: [UID])
  ownerID String

  // Define the sentTransactions field as a relation to the Transaction model
  sentTransactions Transaction[] @relation("sender_transactions")

  // Define the receivedTransactions field as a relation to the Transaction model
  receivedTransactions Transaction[] @relation("recipient_transactions")
}
